#setting directory for entire files
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/tobiagbede/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined")

#install needed libraries
library(ggplot2)
library(pheatmap)
library(apeglm)
library(EnhancedVolcano)
library(DESeq2)
library(clusterProfiler)
library(enrichplot)
library(circlize)
library(dplyr)
library(readr)
library(stringr)
library(org.Hs.eg.db)
library(ReactomePA)
library(DOSE)
library(dplyr)
library(readr)
library(circlize)
library(stringr)
library(VennDiagram)
library(devtools)
library(clusterProfiler)
library(GOplot)


# Import file and set up for deseq
counts <- read.csv("~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/RSEM/2025-06-02_Combined_MM_celll_lines_gene_expression_TPM.tsv", sep = "\t", row.names = 1, header = TRUE, stringsAsFactors = TRUE, check.names = FALSE) #link for RSEM expected count data
coldata <- read.csv("metadata.csv", header = TRUE, row.names = 1 ) #link for metadata if it exists; make as a tsv file using nanos and tab to separate entry
nrow(coldata) # Check number of rows in coldata
colnames(coldata) # Check column names in coldata
geneinfo <- counts[, 1:2] # Extract gene information

colnames(geneinfo)[1] <- "Symbol"
geneinfo$Ensembl_ID <- row.names(geneinfo) # adding symbol
colnames(geneinfo)

CleanedCounts <- counts[, -(1)] # Remove gene information columns
CleanedCounts <- round(CleanedCounts) # Round counts to integers


all(colnames(CleanedCounts) == rownames(coldata)) # Check if column names of counts match row names of coldata; if FALSE, check the metadata file and fix
coldata$Treatment <- as.factor(coldata$Treatment) # Convert condition to factor
coldata$Sensitivity <- as.factor(coldata$Sensitivity) # Convert condition to factor
coldata$CellType <- as.factor(coldata$CellType) # Convert condition to factor
coldata$Plasmid <- as.factor(coldata$Plasmid) # Convert condition to factor
coldata$Batch <- as.factor(coldata$Batch) # Convert condition to factor


#run deseq

# code to view levelling
levels(coldata$Sensitivity)
levels(coldata$Plasmid)
levels(coldata$Treatment)

#code to refactor if needed
coldata$Sensitivity <- relevel(coldata$Sensitivity, ref = "Resistant")
coldata$Plasmid <- relevel(coldata$Plasmid, ref = "TP53KO")

dds <- DESeqDataSetFromMatrix(countData = CleanedCounts,
                              colData = coldata,
                              design = ~ CellType + Plasmid + Sensitivity + Treatment + Sensitivity*Treatment )


dds <- DESeq(dds)

resultsNames(dds)

#GOheatfix for y axis plot - used to define function for plotting heatmap with y axis labels

GOHeat_fix_y <- function (data, nlfc, fill.col) 
{
  x <- y <- z <- NULL
  if (missing(nlfc)) 
    nlfc <- 0
  else nlfc <- nlfc
  if (missing(fill.col)) 
    fill.col <- c("firebrick", "white", "dodgerblue")
  else fill.col <- fill.col
  distance <- dist(data)
  cluster <- hclust(distance)
  M <- dim(data)[2]
  nterm <- M - nlfc
  if (nlfc == 0) {
    s <- rowSums(data[, 1:nterm])
    tmp <- NULL
    for (r in 1:nrow(data)) {
      tmp <- c(tmp, as.numeric(gsub(1, s[r], data[r, 1:nterm])))
    }
  }
  else {
    tmp <- NULL
    for (r in 1:nrow(data)) {
      tmp <- c(tmp, as.numeric(gsub(1, data[r, (nterm + 
                                                  1)], data[r, 1:nterm])))
    }
  }
  df <- data.frame(x = factor(rep(cluster$order, each = nterm)), y = rep(colnames(data[, 
                                                                               1:nterm]), length(rownames(data))), z = tmp, lab = rep(rownames(data), 
                                                                                                                                      each = nterm))
  df_o <- df[order(df$x), ]
  g <- ggplot() +
   geom_tile(data = df_o, aes(x = y, y = x, fill = z)) +
    scale_y_discrete(breaks = 1:length(unique(df_o$x)), labels = unique(df_o$lab)) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(), 
          axis.text.y = element_text(size = 14),
          panel.background = element_blank(), 
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    coord_fixed()
  if (nlfc == 0) {
    g + scale_fill_gradient2("Count", space = "Lab", low = fill.col[2], 
                             mid = fill.col[3], high = fill.col[1])
  }
  else {
    g + scale_fill_gradient2("logFC", space = "Lab", low = fill.col[3], 
                             mid = fill.col[2], high = fill.col[1])
  }
}
```

#Go heat fix x - used to define function for plotting heatmap with x axis labels
GOHeat_fix_x <- function (data, nlfc, fill.col) 
{
  x <- y <- z <- NULL
  if (missing(nlfc)) 
    nlfc <- 0
  else nlfc <- nlfc
  if (missing(fill.col)) 
    fill.col <- c("firebrick", "white", "dodgerblue")
  else fill.col <- fill.col
  distance <- dist(data)
  cluster <- hclust(distance)
  M <- dim(data)[2]
  nterm <- M - nlfc
  if (nlfc == 0) {
    s <- rowSums(data[, 1:nterm])
    tmp <- NULL
    for (r in 1:nrow(data)) {
      tmp <- c(tmp, as.numeric(gsub(1, s[r], data[r, 1:nterm])))
    }
  }
  else {
    tmp <- NULL
    for (r in 1:nrow(data)) {
      tmp <- c(tmp, as.numeric(gsub(1, data[r, (nterm + 
                                                  1)], data[r, 1:nterm])))
    }
  }
  df <- data.frame(x = factor(rep(cluster$order, each = nterm)), y = rep(colnames(data[, 
                                                                               1:nterm]), length(rownames(data))), z = tmp, lab = rep(rownames(data), 
                                                                                                                                      each = nterm))
  df_o <- df[order(df$x), ]
  g <- ggplot() +
    geom_tile(data = df_o, aes(x = x, y = y, fill = z)) +
    scale_x_discrete(breaks = 1:length(unique(df_o$x)), labels = unique(df_o$lab)) +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(), 
          axis.text.y = element_text(size = 14),
          panel.background = element_blank(), 
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    coord_fixed()
  if (nlfc == 0) {
    g + scale_fill_gradient2("Count", space = "Lab", low = fill.col[2], 
                             mid = fill.col[3], high = fill.col[1])
  }
  else {
    g + scale_fill_gradient2("logFC", space = "Lab", low = fill.col[3], 
                             mid = fill.col[2], high = fill.col[1])
  }
}



#setwd - within chunk

setwd("~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01")

suffixes <- c("Plasmid_TP53INP1_vs_TP53KO") # include other results from DESeq result names if needed

for (sfx in suffixes)
  {
#Defining deseq to analyze and combine w genes
OE <- results(dds, name =sfx)
OE <- as.data.frame(OE)
OE$Ensembl_ID <- row.names(OE)
OE_gene <- merge(OE, geneinfo, by= "Ensembl_ID")
OE_gene <- OE_gene[,-c(9) ]
OE_gene_0.1 <- OE_gene[!is.na(OE_gene$padj) & OE_gene$padj<0.05, ] #remember to modify p value as needd
gene <- OE_gene_0.1$Symbol

# Step 1: Define genes and convert
#gene.df <- bitr(gene, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)

# Step 2: Run enrichment analysis (ontology = ALL)
go_res <- enrichGO(
  gene = gene,
  OrgDb = org.Hs.eg.db,
  keyType = "SYMBOL",
  ont = "ALL",
  pvalueCutoff = 0.1, #rem to modify p value as needed
  pAdjustMethod = "BH",
  qvalueCutoff = 0.2,
  minGSSize = 10,
  maxGSSize = 500,
  readable = TRUE,
  pool = TRUE
)

# Step 3: Convert enrichResult to data.frame
ego_df <- as.data.frame(go_res)

# Step 4: Prepare 'terms' data frame
terms <- data.frame(
  Category = ego_df$ONTOLOGY,  # Use actual ontology types: BP, MF, CC
  ID = ego_df$ID,
  Term = ego_df$Description,
  Genes = gsub("/", ", ", ego_df$geneID),  # Convert delimiter
  adj_pval = ego_df$p.adjust
)

# Step 5: Prepare gene expression data (logFC)
#gene_list <- ego_df$geneID
gene_list <- unique(unlist(strsplit(ego_df$geneID, "/")))
Symbol <- as.data.frame(gene_list)
Symbol$Symbol <- Symbol[, 1]
genes_df <- merge(Symbol,OE_gene_0.1, by = "Symbol")

genes_df <- data.frame(
  ID = gene_list,
  logFC = genes_df$log2FoldChange
)


# Step 6: Create circle_dat object and chord
circ <- circle_dat(terms, genes_df)
process <- ego_df$Description
chord <-chord_dat(circ, genes_df, process)
write.csv(circ, (paste0("circ_",sfx, ".csv")))

# Step 7: Plot bubble, bar and circle chart

pdf(file = paste0(sfx, "_GOPlots.pdf"), paper = "special", width = 20, height = 20)

#print(GOBar(circ, display = 'multiple', zsc.col = c('yellow', 'black', 'cyan')))
print(GOBubble(circ, table.col = TRUE, labels = 1, display = "multiple"))
print(GOHeat_fix_x(chord, nlfc = 1, fill.col = c('blue', 'white', 'red')))
print(GOHeat_fix_y(chord, nlfc = 1, fill.col = c('blue', 'white', 'red')))
#print(GOCircle(circ))

dev.off()
}

#Heatmap plotting for anything - in this case for genes of interest
# Genes of interest
genes_of_interest <- c("LPXN", "CYB561", "CLU", "MGAT3", "DPP7", "LAPTM5")

# Set working directory
setwd("~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots")

# List of suffixes for filenames
suffixes <- c("circ_Plasmid_None_vs_EV", "circ_Plasmid_TP53KO_vs_EV", "circ_Plasmid_TP53INP1_vs_EV",
              "circ_SensitivityNone.TreatmentDMSO", "circ_SensitivityNone.TreatmentNone",
              "circ_SensitivityNone.TreatmentPIK", "circ_SensitivitySensitive.TreatmentNone",
              "circ_SensitivityResistant.TreatmentNone",
              "circ_SensitivityResistant.TreatmentPIK", "circ_Treatment_None_vs_PIK",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Plasmid_TP53INP1_vs_TP53KO",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Sensitivity_None_vs_Resistant",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Sensitivity_Resistant_vs_Sensitive",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Sensitivity_None_vs_Sensitive",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_SensitivitySensitive.TreatmentPIK",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Treatment_None_vs_DMSO",
              "~/Desktop/Bioinf/MM_Practice/Cell_Drugs/Combined/DESeq/GOPlots/0.01/circ_Treatment_PIK_vs_DMSO"
              )

# Initialize data frame with genes of interest
lfc_merged <- data.frame(genes = genes_of_interest)

# Loop and merge
for (sfx in suffixes) {
  file_path <- paste0(sfx, ".csv")
  df <- read.csv(file_path)

  # Subset only genes of interest and ensure uniqueness
  df_sub <- df[df$genes %in% genes_of_interest, c("genes", "logFC")]
  df_sub <- df_sub[!duplicated(df_sub$genes), ]  # Keep only first occurrence of each gene

  # Rename the logFC column
  colnames(df_sub)[2] <- sfx

  # Merge with master list
  lfc_merged <- merge(lfc_merged, df_sub, by = "genes", all.x = TRUE)
}

# View result
print(lfc_merged)

rownames(lfc_merged)
colnames(lfc_merged) <- c("genes", "Plasmid_None_vs_EV", "Plasmid_TP53KO_vs_EV", "Plasmid_TP53INP1_vs_EV",
              "SensitivityNone.TreatmentDMSO", "SensitivityNone.TreatmentNone",
              "SensitivityNone.TreatmentPIK", "SensitivitySensitive.TreatmentNone",
              "SensitivityResistant.TreatmentNone",
              "SensitivityResistant.TreatmentPIK", "Treatment_None_vs_PIK", "Plasmid_TP53INP1_vs_TP53KO", "Sensitivity_None_vs_Resistant", "Sensitivity_None_vs_Sensitive", "Sensitivity_Resistant_vs_Sensitive", "SensitivitySensitive.TreatmentPIK", "Treatment_None_vs_DMSO", "Treatment_PIK_vs_DMSO")


#creating master file
lfc_merged <- as.data.frame(lfc_merged)
lfc_merged[is.na(lfc_merged)] <- 0

#lfc_merged1 <- lfc_merged[, -c(5,7,8,11,13)]

library(ComplexHeatmap)
library(circlize)

# Set gene names as row names
rownames(lfc_merged) <- lfc_merged$genes
rownames(lfc_merged1) <- lfc_merged$genes
# Remove the 'genes' column since it's now row names
lfc_matrix <- as.matrix(lfc_merged[ , -1])
lfc_matrix1 <- as.matrix(lfc_merged1[ , -1])

# Optional: Scale the values row-wise (if needed for normalization)
#lfc_matrix2 <- t(scale(t(lfc_matrix1)))

colnames(lfc_matrix)

# Define color mapping
col_fun <- colorRamp2(c(20, 0, -20), c("blue", "white", "red"))  # You can adjust range

column_order <- c("SensitivitySensitive.TreatmentPIK", "SensitivityResistant.TreatmentPIK", "SensitivitySensitive.TreatmentNone", "SensitivityResistant.TreatmentNone", "SensitivityNone.TreatmentDMSO", "SensitivityNone.TreatmentPIK",       "SensitivityNone.TreatmentNone", "Sensitivity_None_vs_Resistant", "Sensitivity_None_vs_Sensitive", "Sensitivity_Resistant_vs_Sensitive", "Treatment_PIK_vs_DMSO", "Treatment_None_vs_PIK", "Treatment_None_vs_DMSO", "Plasmid_None_vs_EV",  "Plasmid_TP53KO_vs_EV", "Plasmid_TP53INP1_vs_EV", "Plasmid_TP53INP1_vs_TP53KO" )

column_order2 <- c("SensitivitySensitive.TreatmentPIK", "SensitivityResistant.TreatmentPIK", "SensitivityResistant.TreatmentNone", "SensitivityNone.TreatmentNone","Sensitivity_None_vs_Sensitive", "Sensitivity_Resistant_vs_Sensitive", "Treatment_PIK_vs_DMSO", "Treatment_None_vs_DMSO", "Plasmid_None_vs_EV",  "Plasmid_TP53KO_vs_EV", "Plasmid_TP53INP1_vs_EV", "Plasmid_TP53INP1_vs_TP53KO" )


col_order <- c(
  "Plasmid_None_vs_EV", 
  "Plasmid_TP53KO_vs_EV", 
  "Plasmid_TP53INP1_vs_EV", 
  "Plasmid_TP53INP1_vs_TP53KO",
  
  "SensitivityNone.TreatmentNone",
  "SensitivityResistant.TreatmentNone",
  
  "SensitivitySensitive.TreatmentPIK",
  "SensitivityResistant.TreatmentPIK",
  
  "Sensitivity_None_vs_Sensitive",
  "Sensitivity_Resistant_vs_Sensitive",
  
  "Treatment_None_vs_DMSO",
  "Treatment_PIK_vs_DMSO"
)


col_order2 <- c(
  "Plasmid_None_vs_EV", 
  "Plasmid_TP53KO_vs_EV", 
  "Plasmid_TP53INP1_vs_EV", 
  "Plasmid_TP53INP1_vs_TP53KO",
  
  "SensitivityNone.TreatmentNone",
  "SensitivitySensitive.TreatmentNone",
  "SensitivityResistant.TreatmentNone",
  "SensitivityNone.TreatmentDMSO",
  
  "SensitivityNone.TreatmentPIK",
  "SensitivitySensitive.TreatmentPIK",
  "SensitivityResistant.TreatmentPIK",
  
  "Sensitivity_None_vs_Sensitive",
  "Sensitivity_None_vs_Resistant",
  "Sensitivity_Resistant_vs_Sensitive",
  
  "Treatment_None_vs_DMSO",
  "Treatment_None_vs_PIK",
  "Treatment_PIK_vs_DMSO"
)

row_order <- c("CYB561", "LAPTM5", "CLU", "DPP7", "LPXN", "MGAT3")
row.names(lfc_matrix)


# Create heatmap
Heatmap(
  lfc_matrix,
  name = "logFC",
  col = col_fun,
  row_order = row_order,
  column_order = column_order,
  show_row_names = TRUE,
  show_column_names = TRUE,
  row_names_gp = gpar(fontsize = 10),
  column_names_gp = gpar(fontsize = 10),
  heatmap_legend_param = list(title = "log2 Fold Change")
)


#create heatmap 2
Heatmap(
  lfc_matrix1,
  name = "logFC",
  col = col_fun,
  row_order = row_order,
  column_order = column_order2,
  show_row_names = TRUE,
  show_column_names = TRUE,
  row_names_gp = gpar(fontsize = 10),
  column_names_gp = gpar(fontsize = 10),
  heatmap_legend_param = list(title = "log2 Fold Change")
)            